#!/bin/bash
set -e; 

DOCKER_VOLUMES="/var/lib/docker/vfs/dir"

function check_app() {
 # Check if name is specified
 if [[ $1 == mysql:* ]]; then
     if [[ -z $2 ]]; then
         echo "You must specify an app name"
         exit 1
     else
         APP="$2"
         # Check if app exists with the same name
         if [[ -d "$DOKKU_ROOT/$APP" ]]; then
             APP_EXISTS=true
         else
             APP_EXISTS=false
         fi
     fi
 fi
}

case "$1" in

  mysql:create)
    check_app $*
    DB_IMAGE=mysql/$APP
    # Check if DB container is installed
    IMAGE=$(docker images | grep "hughfletcher/mysql " |  awk '{print $3}')
    if [[ -z $IMAGE ]]; then
        echo "MySql image not found... Did you run 'dokku plugins-install' ?"
        exit 1
    fi
    # Check if an existing DB volume exists
    if [[ -f "$DOKKU_ROOT/.mysql/volume_$APP" ]]; then
        VOLUME="`cat $DOKKU_ROOT/.mysql/volume_$APP`:/var/lib/mysql"
        echo
        echo "-----> Reusing mysql/$APP database"
    else
        VOLUME="/var/lib/mysql"
        # Generate a random password for DB user
        DB_PASS=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        # DB_NAME=$(echo "www.atomic24.com" | sed -e 's/\.//g')
        # DB_USER='user'$RANDOM
        # Temporarily store it to a file
        if [[ ! -d $DOKKU_ROOT/.mysql ]]; then
            mkdir -p $DOKKU_ROOT/.mysql
            chown -R dokku: $DOKKU_ROOT/.mysql
        fi
        echo $DB_PASS > "$DOKKU_ROOT/.mysql/pass_$APP"
        chown dokku: "$DOKKU_ROOT/.mysql/pass_$APP"
    fi
    # Fork DB image
    ID=$(docker run -d hughfletcher/mysql /bin/bash "exit 0")   
    docker wait $ID > /dev/null
    IMAGE=$(docker commit $ID)
    docker tag $IMAGE $DB_IMAGE
    # Launch container
    ID=$(docker run -v $VOLUME -d $DB_IMAGE /usr/sbin/mysqld)

    if [[ ! -f "$DOKKU_ROOT/.mysql/volume_$APP" ]]; then
        IP=$(docker inspect $ID | grep -e "IPAddress.:" | awk '{ print $2 }' | tr -d ',"')
        sleep 4
        docker run $DB_IMAGE mysqladmin -h $IP -u admin -p'mysql-server' password $DB_PASS
        docker run $DB_IMAGE mysqladmin -h $IP -u admin -p$DB_PASS create 'db'
        echo "ALTER DATABASE db CHARACTER SET utf8 COLLATE utf8_unicode_ci;" | docker run $DB_IMAGE mysql -h $IP -u admin -p$DB_PASS
        # docker run mysql/create mysql -h $IP -u admin -p'newpass' -e "RENAME USER admin@'%' TO $DB_USER@'%';" 
        
        # Set volume path reference
        VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
        echo $VOLUME_PATH > "$DOKKU_ROOT/.mysql/volume_$APP"
        sleep 1
    fi
    # Link to a potential existing app
    dokku mysql:link $APP $APP
    echo
    echo "-----> MySql container created: $DB_IMAGE"
    sleep 1
    dokku mysql:info $APP
    ;;
    
  mysql:restart)
  	check_app $*
    DB_IMAGE=mysql/$APP
    if [[ -f "$DOKKU_ROOT/.mysql/volume_$APP" ]]; then
        VOLUME="`cat $DOKKU_ROOT/.mysql/volume_$APP`:/var/lib/mysql"
        echo
        echo "-----> Reusing mysql/$APP database"
    else
        VOLUME="/var/lib/mysql"
        # Generate a random password for DB user
        DB_PASS=$(< /dev/urandom tr -dc A-Za-z0-9 | head -c 16)
        # DB_NAME=$(echo "www.atomic24.com" | sed -e 's/\.//g')
        # DB_USER='user'$RANDOM
        # Temporarily store it to a file
        if [[ ! -d $DOKKU_ROOT/.mysql ]]; then
            mkdir -p $DOKKU_ROOT/.mysql
            chown -R dokku: $DOKKU_ROOT/.mysql
        fi
        echo $DB_PASS > "$DOKKU_ROOT/.mysql/pass_$APP"
        chown dokku: "$DOKKU_ROOT/.mysql/pass_$APP"
    fi
    # kill existing container
    ID=$(docker ps | grep $DB_IMAGE | head -c16)
    if [ ! -z $ID ]; then
    	docker kill $ID
    	docker wait $ID > /dev/null
    fi
    # Launch container
    ID=$(docker run -v $VOLUME -d $DB_IMAGE /usr/sbin/mysqld)
    echo "-----> MySql container launched: $DB_IMAGE. Relink your apps."
    sleep 1
    dokku mysql:info $APP
    ;;
    
  mysql:shell)
	check_app $*
  	if [[ -f "$DOKKU_ROOT/.mysql/volume_$APP" ]]; then
        IP=$(docker inspect $ID | grep -e "IPAddress.:" | awk '{ print $2 }' | tr -d ',"')
        sleep 4
        docker run $DB_IMAGE mysqladmin -h $IP -u admin -p'mysql-server' password $DB_PASS
        docker run $DB_IMAGE mysqladmin -h $IP -u admin -p$DB_PASS create 'db'
        # docker run mysql/create mysql -h $IP -u admin -p'newpass' -e "RENAME USER admin@'%' TO $DB_USER@'%';" 
        
        # Set volume path reference
        VOLUME_PATH=$(docker inspect $ID | grep /var/lib/docker/vfs/dir/ | awk '{print $2}' | sed -e's/"//g')
        echo $VOLUME_PATH > "$DOKKU_ROOT/.mysql/volume_$APP"
        sleep 1 
    else
    	echo "Could not fine $DOKKU_ROOT/.mysql/volume_$APP"
    fi
	;;    
    
  mysql:delete)
    check_app $*
    DB_IMAGE=mysql/$APP
    # unlink from apps
    #dokku mysql:unlink $APP    
    # Stop the container and remove it
    ID=$(docker ps -a | grep "$DB_IMAGE" |  awk '{print $1}' | paste -d " " -s)
    if [[ ! -z $ID ]]; then
        echo "-----> Mysql containers stopped and removed: $ID"
        docker stop $ID
        sleep 10
        # https://docs.docker.com/userguide/dockervolumes/
        docker rm -v $ID
    fi
    # Remove image
    IMAGE=$(docker images | grep "$DB_IMAGE " |  awk '{print $1}' | paste -d " " -s)
    if [[ ! -z $IMAGE ]]; then
        echo "-----> Mysql container images removed: $IMAGE"
        docker rmi $IMAGE
    fi
    # Remove persistent volume
    if [[ -f "$DOKKU_ROOT/.mysql/volume_$APP" ]]; then
        echo "-----> MySql persistent volumes deleted"
        rm -rf "`cat "$DOKKU_ROOT/.mysql/volume_$APP"`"
        rm -rf $DOKKU_ROOT/.mysql/volume_$APP
    fi
    echo
    echo "-----> MySql container deleted: $DB_IMAGE"
    ;;

  mysql:info)
    check_app $*
    DB_IMAGE=mysql/$APP
    ID=$(docker ps | grep "$DB_IMAGE" |  awk '{print $1}')
    IP=`echo $(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $ID)`
    echo "$ID"
    # PORT=$(docker port $ID 5432)
    echo
    echo "       Host: $IP"
    echo "       User: 'admin'"
    if [[ -f "$DOKKU_ROOT/.mysql/pass_$APP" ]]; then
        echo "       Password: '$(cat "$DOKKU_ROOT/.mysql/pass_$APP")'"
    fi
    echo "       Database: 'db'"
    # echo "       Public port: $PORT"
    echo "       Internal port: 3306"
    echo
    ;;

  mysql:link)
    check_app $*
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a database name"
            exit 1
        fi
        DB=$3
        DB_IMAGE=mysql/$DB
        # Check link file
        if [[ -f "$DOKKU_ROOT/$APP/.mysql_$DB" ]]; then
            echo "Database is already linked. Relinking now..."
            dokku config:unset $APP MYSQL_USER MYSQL_PASSWORD MYSQL_PORT MYSQL_URL
        fi
        DB_PASSWORD=$(cat "$DOKKU_ROOT/.mysql/pass_$DB")
        ID=$(docker ps | grep "$DB_IMAGE" |  awk '{print $1}')
        IP=`echo $(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $ID)`
        dokku config:set $APP MYSQL_USER=admin MYSQL_PASSWORD=$DB_PASSWORD MYSQL_PORT=$PORT MYSQL_URL=mysql2://admin:$DB_PASSWORD@$IP/db
        echo
        echo "-----> $APP linked to $DB_IMAGE database"
        # document link
        touch $DOKKU_ROOT/$APP/.mysql_$DB
    fi
    ;;
    
    mysql:unlink)
    check_app $*
    if $APP_EXISTS; then
        # Check argument
        if [[ -z $3 ]]; then
            echo "You must specify a database name"
            exit 1
        fi
        DB=$3
        DB_IMAGE="mysql/$3"
        # Check link file
        if [[ -f "$DOKKU_ROOT/$APP/.mysql_$DB" ]]; then
            echo "----->  Unlinking $APP from $DB. Restart your app"
            rm "$DOKKU_ROOT/$APP/.mysql_$DB"
        else
            echo "-----> $APP is not linked to $DB"
            exit 1
        fi
    fi
    ;;

  mysql:logs)
    check_app $*
    DB_IMAGE=mysql/$APP
    ID=$(docker ps | grep "$DB_IMAGE" |  awk '{print $1}')
    echo $ID
    docker logs $ID | tail -n 100
    ;;

  mysql:list)
    find $DOKKU_ROOT/.mysql/volume* | awk -F _ '{ print $2 }'  
    ;;
    
  mysql:export)
    DB=$2
    if [[ ! -z $DB ]]; then
        DB_IMAGE=mysql/$DB
        ID=$(docker ps | grep "$DB_IMAGE" |  awk '{print $1}')
        IP=`echo $(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $ID)`
        DB_PASSWORD=$(cat "$DOKKU_ROOT/.mysql/pass_$DB")
        docker run $DB_IMAGE mysqldump -h $IP -uadmin -p$DB_PASSWORD --opt db
    else
        echo "$APP does not exist" 
    fi
    ;; 
    
  mysql:import)
    DB=$2
    URL=$3
    if [[ ! -z $DB ]]; then
        DB_IMAGE=mysql/$DB
        ID=$(docker ps | grep "$DB_IMAGE" |  awk '{print $1}')
        IP=`echo $(docker inspect --format="{{ .NetworkSettings.IPAddress }}" $ID)`
        DB_PASSWORD=$(cat "$DOKKU_ROOT/.mysql/pass_$DB")
        DUMP_FILE=mysql_$DB.sql 
        HOST_TMP=/tmp
        CONTAINER_TMP=/mnt/tmp
        echo "Downloading from $URL to $HOST_TMP/$DUMP_FILE"
        curl -o $HOST_TMP/$DUMP_FILE $URL
        echo "Loading $CONTAINER_TMP/$DUMP_FILE into $DB_IMAGE"
        docker run -v $HOST_TMP:$CONTAINER_TMP $DB_IMAGE /bin/bash -c "mysql -h $IP -uadmin -p$DB_PASSWORD db < $CONTAINER_TMP/$DUMP_FILE" 
    else
        echo "$APP does not exist"    
	fi
	;;
    

  mysql-tests)
     check_app $*
        echo ">>> Running Tests"
        /usr/bin/shunit2 /var/lib/dokku/plugins/mysql/tests/commands
    ;;

  help)
    cat && cat<<EOF
    mysql:create <db>      Create a MySql container
    mysql:delete <db>      Delete specified MySql container
    mysql:info <db>        Display database informations
    mysql:link <app> <db>  Link an app to a MySql database
    mysql:logs <db>        Display last logs from MySql container
    mysql:list             List all MySql databases created
    mysql:restart db       Restart the database service
    mysql:export db        Export the DB to stdout
    mysql:import db URL    Import DB from URL
EOF
    ;;

esac
